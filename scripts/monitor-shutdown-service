#!/usr/bin/python3

import logging
import os
import pika
import threading
import time
import zmq

class NodeControllerShutdownThread(threading.Thread):
  def __init__(self):
    threading.Thread.__init__(self, group=None, target=None, name=None)
    self.wait_for_ep = False

  def run(self):
    logging.info("Wagman is cycling the node controller power in one minute; shutdown in 30 seconds")
    os.system("shutdown -h -k +1")
    time.sleep(30)
    while self.wait_for_ep:
      time.sleep(1)
    logging.info("node controller shutdown now")
    os.system("shutdown -h now")

class EdgeProcessorShutdownThread(threading.Thread):
  def __init__(self, nc_stopper):
    threading.Thread.__init__(self, group=None, target=None, name=None)
    nc_stopper.wait_for_ep = True
    self.nc_stopper = nc_stopper
    self.running = False

  def run(self):
    while True:
      if self.running == True:
        logging.info("Wagman is cycling the Edge Processor power in one minute; shutdown in 30 seconds")
        os.system('/usr/lib/waggle/nodecontroller/scripts/eplogin shutdown -h -k +1')
        time.sleep(30)
        logging.info("Edge Processor shutting down now")
        os.system('/usr/lib/waggle/nodecontroller/scripts/eplogin shutdown -h now')
        time.sleep(30)
        self.running = False
        self.nc_stopper.wait_for_ep = False
      else:
        time.sleep(1)

class RPCConsumerThread(threading.Thread):
  def __init__(self):
    threading.Thread.__init__(self, group=None, target=None, name=None)
    self.channel = channel
    credentials = pika.credentials.PlainCredentials('node', 'waggle')
    ssl_options={'ca_certs':'/usr/lib/waggle/SSL/waggleca/cacert.pem',
                 'certfile':'/usr/lib/waggle/SSL/node/cert.pem',
                 'keyfile':'/usr/lib/waggle/SSL/node/key.pem'}

    connection = pika.BlockingConnection(pika.ConnectionParameters(
      host="beehive1.mcs.anl.gov", port=23181, credentials=credentials, ssl=True,
      ssl_options=ssl_options))
    self.channel = connection.channel()
    with open('/etc/waggle/node_id') as id_file:
      node_id = id_file.read().rstrip()
    queue = ''.join(('rpc_shutdown_', node_id))
    self.channel.queue_declare(queue=queue)
    self.channel.basic_consume(rpc_callback, queue=queue, no_ack=True)

  def run(self):
    self.channel.start_consuming()

def subscribe_wagman_status():
  context = zmq.Context()
  socket = context.socket(zmq.SUB)
  socket.setsockopt(zmq.RCVTIMEO, 5000)
  socket.setsockopt(zmq.SUBSCRIBE, b'')
  socket.connect ('ipc:///tmp/zeromq_wagman-pub')
  return socket

def unsubscribe_wagman_status(socket):
  socket.close()

# Check for shutdown messages
def check_wagman_shutdown(socket):
  message = ""
  try:
    message = socket.recv_string()
    if 'nc stopp' in message:
      return "nc"
    elif 'gn stopp' in message:
      return "ep"
  except zmq.ZMQError:
    pass
  return 'no'

def rpc_callback(channel, method, properties, body):
  print(" [x] Received %r" % body)


logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
wagman_status = subscribe_wagman_status()

logging.info("waggle-shutdown-monitor service is running...")

consumer = RPCConsumerThread()
consumer.start()


nc_stopper = NodeControllerShutdownThread()
ep_stopper = EdgeProcessorShutdownThread(nc_stopper)
ep_stopper.start()
while True:
  shutdown = check_wagman_shutdown(wagman_status)
  if (shutdown == 'nc'):
    nc_stopper.start()
  elif (shutdown == 'ep' and not ep_stopper.running):
    ep_stopper.running = True
  time.sleep(1)
