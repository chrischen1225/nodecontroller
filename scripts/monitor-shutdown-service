#!/usr/bin/python3

import logging
import os
import threading
import time
import zmq

class NodeControllerShutdownThread(threading.Thread):
  def run(self):
    logging.info("Wagman is cycling the node controller power in one minute; shutdown in 30 seconds")
    os.system("shutdown -h -k +1")
    time.sleep(30)
    logging.info("node controller shutdown now")
    os.system("shutdown -h now")

class GuestNodeShutdownThread(threading.Thread):
  def __init__(self):
    threading.Thread.__init__(self, group=None, target=None, name=None)
    self.running = False

  def run(self):
    while True:
      if self.running == True:
        logging.info("Wagman is cycling the guest node power in one minute; shutdown in 30 seconds")
        os.system('ssh -i /usr/lib/waggle/SSL/guest/id_rsa_waggle_aot_guest_node 10.31.81.51 \
                     -o "StrictHostKeyChecking no" -o "PasswordAuthentication no" -o "ConnectTimeout 5" \
                     shutdown -h -k +1')
        time.sleep(30)
        logging.info("guest node shutdown now")
        os.system('ssh -i /usr/lib/waggle/SSL/guest/id_rsa_waggle_aot_guest_node 10.31.81.51 \
                     -o "StrictHostKeyChecking no" -o "PasswordAuthentication no" -o "ConnectTimeout 5" \
                     shutdown -h now')
        time.sleep(30)
        self.running = False
      else:
        time.sleep(1)

def subscribe_wagman_status():
  context = zmq.Context()
  socket = context.socket(zmq.SUB)
  socket.setsockopt(zmq.RCVTIMEO, 5000)
  socket.setsockopt(zmq.SUBSCRIBE, b'')
  socket.connect ('ipc:///tmp/zeromq_wagman-pub')
  return socket

def unsubscribe_wagman_status(socket):
  socket.close()

# Check for shutdown messages
def check_wagman_shutdown(socket):
  message = ""
  try:
    message = socket.recv_string()
    if 'nc stopp' in message:
      return "nc"
    elif 'gn stopp' in message:
      return "gn"
  except zmq.ZMQError:
    pass
  return 'no'

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
wagman_status = subscribe_wagman_status()

logging.info("waggle-shutdown-monitor service is running...")

nc_stopper = NodeControllerShutdownThread()
gn_stopper = GuestNodeShutdownThread()
gn_stopper.start()
while True:
  shutdown = check_wagman_shutdown(wagman_status)
  if (shutdown == 'nc'):
    nc_stopper.start()
  elif (shutdown == 'gn' and not gn_stopper.running):
    gn_stopper.running = True
  time.sleep(1)
