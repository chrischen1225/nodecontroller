#!/usr/bin/python3

import zmq
import time
import logging
import math
import waggle.logging
import json
import os

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

beehive_reporter = waggle.logging.getLogger('monitor-wagman')

############################
##### Helper Functions #####
############################

def reset_wagman():
	os.system("/usr/lib/waggle/nodecontroller/scripts/reset-wagman")

def thermistor_conversion(raw, nc = True):
	'''
	Conversion equation for thermistor, MF52C1103F3380
	
	Coefficients for MF12 10k 3380 thermistor in -30 C to 110 C
	referred to http://www.cantherm.com/choosing_ntc
	T = 1 / (A + (B * ln(rt)) + (C *ln(rt)^3)), in Kelvin

	In Wagman v3, the thermistor for node controller uses 5 Vin,
	otherwise 1.8 Vin through 16-bit ADC converter
	'''
	if isinstance(raw, str):
		raw = int(raw)
	elif isinstance(raw, bytes):
		raw = int(raw)

	if not isinstance(raw, int):
		# we cannot convert it
		return raw

	if raw == 0:
		return raw

	Vin = V = 0.0
	if nc:
		Vin = 5.0
		V = raw / 1024.0 * 5.0
	else:
		Vin = 1.8
		# Because Wagman V3 right-shifts the value by 5, don't know why
		# we lose some precision... but maybe does not matter
		raw = raw << 5
		LSB = 0.0000625 # 6.25 uV for 16-bit ADC converter
		V = raw * LSB

	A = 0.00088570897
	B = 0.00025163902
	C = 0.00000019289731
	R = 23000.0 # 23k ohm

	rt = R * (Vin / V - 1)
	logrt = math.log(rt)
	temp = 1 / (A + (B * logrt) + (C * logrt * logrt * logrt))
	tempC = temp - 273.15
	return ''.join("%.2f C" % tempC)

class wagmanListener(object):
	'''
	For Wagman V3!
	A thread to listen Wagman status from the ZMQ publisher
	Available information from this class will be...
		nc_heartbeat: last heartbeat time from nc
		nc_curr: int_current and last_updated
		nc_temp: int_tempterature and last_updated
		nc_fails: number of fails on booting
		nc_enabled: enable flag
		nc_media: media used on current booting

		gn_heartbeat: last heartbeat time from gn
		gn_curr: int_current and last_updated
		gn_temp: int_tempterature and last_updated
		gn_fails: number of fails on booting
		gn_enabled: enable flag
		gn_media: media used on current booting

		cs_heartbeat: last heartbeat time from conresense board

		wagman_id: identification of Wagman
		wagman_date: RTC of Wagman and last_updated
		wagman_curr: int_current and last_updated
		wagman_temp: temperature of Wagman
		wagman_humid: humidity of Wagman

		bettery_temp: temperature of the battery of Wagman

		body_temp: temperature of the middle plane between Wagman and XU4

		ps_temp: temperature of the power supply

		error: when no connection available to Wagman
	* some of the entities have 'ENTITY_lastupdated', telling the time when updated
	'''

	def __init__(self):
		self.socket = None
		self.isConnected = False
		self.isClosed = False
		
		self.beehive_report_period = 300 # (seconds) 5 minutes
		self.wagman_watchdog = time.time()
		self.max_wagman_silence_duration = 600  # (seconds) 10 minutes
		self.timer = time.time()

		self.status = {}
		self.connect()

	def close(self):
		self.isClosed = True
		if self.isConnected:
			self.disconnect()

	def connect(self):
		try: 
			context = zmq.Context()
			self.socket = context.socket(zmq.SUB)
			self.socket.setsockopt(zmq.RCVTIMEO, 10000)
			self.socket.setsockopt(zmq.SUBSCRIBE, b'')
			self.socket.connect ('ipc:///tmp/zeromq_wagman-pub')
			self.isConnected = True
		except (zmq.ZMQError, Exception) as e:
			logging.info("Failed to connect wagman-publisher")
			pass

	def disconnect(self):
		if self.socket != None and self.isConnected:
			self.socket.close()
			self.isConnected = False

	def ssplit(self, str, separator = ' '):
		ret = []
		try:
			splits = str.split(separator)
			for item in splits:
				ret.append(item)
		except:
			pass
		return ret

	def report(self):
		try:
			beehive_reporter.info(json.dumps(self.status))
		except:
			beehive_reporter.info(self.status)
		self.timer = time.time()

	def run(self):
		while not self.isClosed:
			current_time = time.time()
			if current_time - self.timer > self.beehive_report_period:
				self.report()

			if current_time - self.wagman_watchdog > self.max_wagman_silence_duration:
				logging.info("WagMan is not well. Resetting WagMan...")
				beehive_reporter.error("WagMan is not well. Resetting WagMan...")
				reset_wagman()
				self.wagman_watchdog = current_time

			msg = ""
			try:
				msg = self.socket.recv_string()
			except (zmq.ZMQError, Exception) as e:
				self.disconnect()
				logging.info("No msg received within 10 sec. Retrying in 3 sec...")
				time.sleep(3)
				self.connect()

			if not msg:
				continue

			prefix, _, content = msg.partition(':')
			if "error" in prefix:
				self.status["error"] = content
				self.status["error_lastupdated"] = time.time()
				continue
			else:
				# Wagman is well
				self.wagman_watchdog = current_time
				if "error" in self.status:
					del self.status["error"]
					if "error_lastupdated" in self.status:
						del self.status["error_lastupdated"]
			prefix, _, content = (content.strip()).partition(' ')

			if "nc" in prefix:
				if "heartbeat" in content:
					self.status['nc_heartbeat'] = time.time()
			elif "gn" in prefix:
				if "heartbeat" in content:
					self.status['gn_heartbeat'] = time.time()
			elif "cs" in prefix:
				if "heartbeat" in content:
					self.status['cs_heartbeat'] = time.time()
			elif "id" in prefix:
				self.status['wagman_id'] = content
			elif "date" in prefix:
				self.status['wagman_date'] = content
				self.status['wagmans_date_lastupdated'] = time.time()
			elif "cu" in prefix:
				splits = self.ssplit(content)
				# Wagman V3 always reports 6 values
				if len(splits) < 6:
					pass
				else:
					self.status['wagman_curr'] = splits[0]
					self.status['wagman_curr_lastupdated'] = time.time()
					self.status['nc_curr'] = splits[1]
					self.status['nc_curr_lastupdated'] = time.time()
					self.status['gn_curr'] = splits[2]
					self.status['gn_curr_lastupdated'] = time.time()
					self.status['cs_curr'] = splits[3]
					self.status['cs_curr_lastupdated'] = time.time()
			elif "th" in prefix:
				splits = self.ssplit(content)
				# Wagman V3 always reports 5 values 
				if len(splits) < 5:
					pass
				else:
					self.status['nc_temp'] = thermistor_conversion(splits[0], nc=True)
					self.status['nc_temp_lastupdated'] = time.time()
					self.status['gn_temp'] = thermistor_conversion(splits[1], nc=False)
					self.status['gn_temp_lastupdated'] = time.time()
					self.status['body_temp'] = thermistor_conversion(splits[2], nc=False)
					self.status['body_temp_lastupdated'] = time.time()
					self.status['ps_temp'] = thermistor_conversion(splits[3], nc=False)
					self.status['ps_temp_lastupdated'] = time.time()
					self.status['battery_temp'] = thermistor_conversion(splits[4], nc=False)
					self.status['battery_temp_lastupdated'] = time.time()
			elif "env" in prefix:
				splits = self.ssplit(content)
				if len(splits) < 2:
					pass
				else:
					self.status['wagman_temp'] = splits[0] + " C"
					self.status['wagman_temp_lastupdated'] = time.time()
					self.status['wagman_humid'] = splits[1] + " %"
					self.status['wagman_humid_lastupdated'] = time.time()
			elif "fails" in prefix:
				splits = self.ssplit(content)
				if len(splits) < 2:
					pass
				else:
					self.status['nc_fails'] = splits[0]
					self.status['gn_fails'] = splits[1]
			elif "enabled" in prefix:
				splits = self.ssplit(content)
				if len(splits) < 3:
					pass
				else:
					self.status['nc_enabled'] = splits[0]
					self.status['gn_enabled'] = splits[1]
					self.status['cs_enabled'] = splits[2]
			elif "media" in prefix:
				splits = self.ssplit(content)
				if len(splits) < 2:
					pass
				else:
					self.status['nc_media'] = splits[0]
					self.status['gn_media'] = splits[1]
		self.disconnect()

if __name__ == "__main__":
	wagman_status = wagmanListener()
	wagman_status.run()
